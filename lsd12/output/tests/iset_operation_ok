;OP_PROGRAM []
;|  OP_ID (x) []
;|  next
;|  OP_FUNCTION [ -> main():v(-1,4)]
;|  |  OP_ID (main) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_PARAMS [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_TYPE (v) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_DECLBLOCK [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  OP_FUNCTION_VAR_DECL [ -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (a) [ -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (a) [ -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (addIset) [ -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (1) [ -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (a) [ -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (a) [ -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (0) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (i) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ADD_ISET [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (i) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_LEXPR (a) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_WRITE [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_SIZE_ISET [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (createset) [ -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (1) [ -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (a) [ -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (a) [ -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (b) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_READ [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_WHILE [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_NOT [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_EQ [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_FUNCTION_CALL [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_ID (addIset) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_READ [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (printset) [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (1) [ -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (a) [ -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (a) [ -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_WHILE [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LT [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_SIZE_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_WRITE [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_ADD_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_REMOVE_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_WHILE [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LT [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_SIZE_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_ADD_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_REMOVE_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_BODY [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  OP_INSTRUCTION_LIST [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_FUNCTION_CALL [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_ID (createset) [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_LEXPR (a) [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_CALL [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_ID (printset) [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_LEXPR (a) [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_CALL [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_ID (printset) [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_LEXPR (a) [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;39: OP_PROGRAM []
ssp 7
lda i 0 6
ldc i 0
sto i
lda a 0 5
ldc i 1
new
lda a 0 5
ind a
ldc a 0
sto a
ujp @begin
define @iset_contains
ssp 5
ldc a 3
ldc b 0
sto b
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @containsWhile
ldc a 3
ind b
not b
fjp @containsEndWhile
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @containsEndWhile
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 3
ldc a 2
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
equ i
sto b
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @containsWhile
define @containsEndWhile
lda b 0 0
ldc a 3
ind b
sto b
retf
define @iset_add
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @addToSetElseSizeDiffZero
ldc a 0
ind a
ldc i 2
new
ldc a 0
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 0
ind a
ind a
ldc a 0
sto a
ldc a 0
ind a
ldc a 1
add a
ldc i 1
sto i
ujp @addToSetEndIfSizeZero
define @addToSetElseSizeDiffZero
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @addToSetWhileFindWhereToInsert
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 3
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
les i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @addToSetWhileFindWhereToInsert
define @addToSetEndWhileFindWhereToInsert
ldc a 2
ind a
ldc i 2
new
ldc a 2
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 2
ind a
ind a
ldc a 3
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
add i
sto i
define @addToSetEndIfSizeZero
define @addToSetEndAddToSet
retp
define @iset_remove
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @removeFromSetElseNonEmptySet
ujp @removeFromSetEndRemove
define @removeFromSetElseNonEmptySet
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @removeFromSetWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndWhileNotVal
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
neq i
fjp @removeFromSetEndWhileNotVal
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @removeFromSetWhileNotVal
define @removeFromSetEndWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndIfValEqu
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
equ i
fjp @removeFromSetEndIfValEqu
ldc a 2
ind a
ldc a 3
ind a
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
sub i
sto i
define @removeFromSetEndIfValEqu
define @removeFromSetEndRemove
retp
define @iset_max
ssp 5
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @maxInSetWhileNotEnd
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @maxInSetEndWhileNotEnd
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @maxInSetWhileNotEnd
define @maxInSetEndWhileNotEnd
lda i 0 0
ldc a 2
ind a
ldc a 1
add a
ind i
sto i
retf
define @iset_min
ssp 5
lda i 0 0
ldc a 0
ind a
ldc a 1
add a
ind i
sto i
retf
;34: OP_FUNCTION_DECLBLOCK [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;9: OP_FUNCTION [ -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @addIset_1
ssp 7
ujp @addIset_1Body
;6: OP_FUNCTION_DECLBLOCK [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @addIset_1Body
;9: OP_INSTRUCTION_LIST [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;7: OP_ADD_ISET [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 1
;7: OP_LEXPR (i) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda i 0 6
ind i
sto i
ldc a 0
lod a 0 5
sto a
mst 1
cup 0 @iset_contains
not b
fjp @skip_insert_2
ldc a 1
;7: OP_LEXPR (i) [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda i 0 6
ind i
sto i
ldc a 0
lod a 0 5
sto a
mst 1
cup 0 @iset_add
define @skip_insert_2
;8: OP_WRITE [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;8: OP_SIZE_ISET [ -> +i:i(1,6) -> +a:a(1,5) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lod a 0 5
ldc a 1
add a
ind i
prin
retp
;19: OP_FUNCTION [ -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @createset_3
ssp 7
ujp @createset_3Body
;13: OP_FUNCTION_DECLBLOCK [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @createset_3Body
;19: OP_INSTRUCTION_LIST [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;14: OP_READ [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda i 0 6
read
sto i
;18: OP_WHILE [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @while_4
;15: OP_NOT [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;15: OP_EQ [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;15: OP_LEXPR (b) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda i 0 6
ind i
;15: OP_CONSTANT_INT (0) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc i 0
equ i
not b
fjp @od_4
;18: OP_INSTRUCTION_LIST [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;16: OP_FUNCTION_CALL [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
mst 1
lod a 0 5
;16: OP_LEXPR (b) [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda i 0 6
ind i
cup 2 @addIset_1
;17: OP_READ [ -> b:i(1,6) -> +a:a(1,5) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda i 0 6
read
sto i
ujp @while_4
define @od_4
retp
;33: OP_FUNCTION [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @printset_5
ssp 8
lda i 0 7
ldc i 0
sto i
lda a 0 6
ldc i 1
new
lda a 0 6
ind a
ldc a 0
sto a
ujp @printset_5Body
;23: OP_FUNCTION_DECLBLOCK [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @printset_5Body
;33: OP_INSTRUCTION_LIST [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;28: OP_WHILE [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @while_6
;24: OP_LT [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;24: OP_CONSTANT_INT (0) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc i 0
;24: OP_SIZE_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lod a 0 5
ldc a 1
add a
ind i
les i
fjp @od_6
;28: OP_INSTRUCTION_LIST [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;25: OP_WRITE [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;25: OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 0
;25: OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lod a 0 5
ind a
sto a
mst 1
cup 0 @iset_min
prin
;26: OP_ADD_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 1
;26: OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 0
;26: OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lod a 0 5
ind a
sto a
mst 1
cup 0 @iset_min
sto i
ldc a 0
lda a 0 6
sto a
mst 1
cup 0 @iset_contains
not b
fjp @skip_insert_7
ldc a 1
;26: OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 0
;26: OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lod a 0 5
ind a
sto a
mst 1
cup 0 @iset_min
sto i
ldc a 0
lda a 0 6
sto a
mst 1
cup 0 @iset_add
define @skip_insert_7
;27: OP_REMOVE_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 1
;27: OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 0
;27: OP_LEXPR (a) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lod a 0 5
ind a
sto a
mst 1
cup 0 @iset_min
sto i
ldc a 0
lod a 0 5
sto a
mst 1
cup 0 @iset_remove
ujp @while_6
define @od_6
;32: OP_WHILE [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
define @while_8
;29: OP_LT [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;29: OP_CONSTANT_INT (0) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc i 0
;29: OP_SIZE_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda a 0 6
ldc a 1
add a
ind i
les i
fjp @od_8
;32: OP_INSTRUCTION_LIST [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;30: OP_ADD_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 1
;30: OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 0
;30: OP_LEXPR (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda a 0 6
ind a
sto a
mst 1
cup 0 @iset_min
sto i
ldc a 0
lod a 0 5
sto a
mst 1
cup 0 @iset_contains
not b
fjp @skip_insert_9
ldc a 1
;30: OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 0
;30: OP_LEXPR (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda a 0 6
ind a
sto a
mst 1
cup 0 @iset_min
sto i
ldc a 0
lod a 0 5
sto a
mst 1
cup 0 @iset_add
define @skip_insert_9
;31: OP_REMOVE_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 1
;31: OP_MIN_ISET [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
ldc a 0
;31: OP_LEXPR (b) [ -> b:a(1,6) -> +a:a(1,5) -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
lda a 0 6
ind a
sto a
mst 1
cup 0 @iset_min
sto i
ldc a 0
lda a 0 6
sto a
mst 1
cup 0 @iset_remove
ujp @while_8
define @od_8
retp
define @begin
;38: OP_INSTRUCTION_LIST [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
;35: OP_FUNCTION_CALL [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
mst 0
lda a 0 5
cup 1 @createset_3
;36: OP_FUNCTION_CALL [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
mst 0
lda a 0 5
cup 1 @printset_5
;37: OP_FUNCTION_CALL [ -> printset(&a):v(0,4) -> createset(&a):v(0,4) -> addIset(&a,i):v(0,4) -> a:a(0,5) -> main():v(-1,4)]
mst 0
lda a 0 5
cup 1 @printset_5
stp
