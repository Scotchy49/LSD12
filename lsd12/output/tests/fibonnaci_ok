;OP_PROGRAM []
;|  OP_ID (fib) []
;|  next
;|  OP_FUNCTION [ -> main():v(-1,4)]
;|  |  OP_ID (main) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_PARAMS [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_TYPE (v) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_DECLBLOCK [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  OP_FUNCTION_VAR_DECL [ -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (a) [ -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (i) [ -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (fib) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (0) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_IF [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LTE [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_LEXPR (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_CONSTANT_INT (1) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_RETURN [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_CONSTANT_INT (1) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_RETURN [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_PLUS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_FUNCTION_CALL [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_ID (fib) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_MINUS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_CONSTANT_INT (1) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_FUNCTION_CALL [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_ID (fib) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_MINUS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_CONSTANT_INT (2) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_BODY [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  OP_INSTRUCTION_LIST [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ASSIGN [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_LEXPR (a) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_CONSTANT_INT (1) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_WHILE [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_LT [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_LEXPR (a) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_READ [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (a) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_WRITE [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_FUNCTION_CALL [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_ID (fib) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;34: OP_PROGRAM []
ssp 6
ujp @begin
define @iset_contains
ssp 5
ldc a 3
ldc b 0
sto b
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @containsWhile
ldc a 3
ind b
not b
fjp @containsEndWhile
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @containsEndWhile
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 3
ldc a 2
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
equ i
sto b
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @containsWhile
define @containsEndWhile
lda b 0 0
ldc a 3
ind b
sto b
retf
define @iset_add
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @addToSetElseSizeDiffZero
ldc a 0
ind a
ldc i 2
new
ldc a 0
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 0
ind a
ind a
ldc a 0
sto a
ldc a 0
ind a
ldc a 1
add a
ldc i 1
sto i
ujp @addToSetEndIfSizeZero
define @addToSetElseSizeDiffZero
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @addToSetWhileFindWhereToInsert
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 3
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
les i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @addToSetWhileFindWhereToInsert
define @addToSetEndWhileFindWhereToInsert
ldc a 2
ind a
ldc i 2
new
ldc a 2
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 2
ind a
ind a
ldc a 3
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
add i
sto i
define @addToSetEndIfSizeZero
define @addToSetEndAddToSet
retp
define @iset_remove
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @removeFromSetElseNonEmptySet
ujp @removeFromSetEndRemove
define @removeFromSetElseNonEmptySet
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @removeFromSetWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndWhileNotVal
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
neq i
fjp @removeFromSetEndWhileNotVal
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @removeFromSetWhileNotVal
define @removeFromSetEndWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndIfValEqu
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
equ i
fjp @removeFromSetEndIfValEqu
ldc a 2
ind a
ldc a 3
ind a
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
sub i
sto i
define @removeFromSetEndIfValEqu
define @removeFromSetEndRemove
retp
define @iset_max
ssp 5
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @maxInSetWhileNotEnd
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @maxInSetEndWhileNotEnd
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @maxInSetWhileNotEnd
define @maxInSetEndWhileNotEnd
lda i 0 0
ldc a 2
ind a
ldc a 1
add a
ind i
sto i
retf
define @iset_min
ssp 5
lda i 0 0
ldc a 0
ind a
ldc a 1
add a
ind i
sto i
retf
;27: OP_FUNCTION_DECLBLOCK [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;26: OP_FUNCTION [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
define @fib_1
ssp 6
ujp @fib_1Body
;21: OP_FUNCTION_DECLBLOCK [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
define @fib_1Body
;26: OP_INSTRUCTION_LIST [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;24: OP_IF [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;22: OP_LTE [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;22: OP_LEXPR (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
ind i
;22: OP_CONSTANT_INT (1) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 1
leq i
fjp @fi_2
;24: OP_INSTRUCTION_LIST [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;23: OP_RETURN [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 0
;23: OP_CONSTANT_INT (1) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 1
sto i
retf
define @fi_2
;25: OP_RETURN [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 0
;25: OP_PLUS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;25: OP_FUNCTION_CALL [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
mst 1
;25: OP_MINUS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;25: OP_LEXPR (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
ind i
;25: OP_CONSTANT_INT (1) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 1
sub i
cup 1 @fib_1
;25: OP_FUNCTION_CALL [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
mst 1
;25: OP_MINUS [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;25: OP_LEXPR (i) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
ind i
;25: OP_CONSTANT_INT (2) [ -> +i:i(1,5) -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 2
sub i
cup 1 @fib_1
add i
sto i
retf
retf
define @begin
;33: OP_INSTRUCTION_LIST [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;28: OP_ASSIGN [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
;28: OP_CONSTANT_INT (1) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 1
sto i
;32: OP_WHILE [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
define @while_3
;29: OP_LT [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;29: OP_CONSTANT_INT (0) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 0
;29: OP_LEXPR (a) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
ind i
les i
fjp @od_3
;32: OP_INSTRUCTION_LIST [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;30: OP_READ [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
read
sto i
;31: OP_WRITE [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;31: OP_FUNCTION_CALL [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
mst 0
;31: OP_LEXPR (a) [ -> fib(i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
ind i
cup 1 @fib_1
prin
ujp @while_3
define @od_3
stp
