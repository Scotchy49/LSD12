;OP_PROGRAM []
;|  OP_ID (exemple) []
;|  next
;|  OP_FUNCTION [ -> main():v(-1,4)]
;|  |  OP_ID (main) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_PARAMS [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_TYPE (v) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_DECLBLOCK [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  OP_FUNCTION_VAR_DECL [ -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (a) [ -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (b) [ -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION_VAR_DECL [ -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (b) [ -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (i) [ -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION_VAR_DECL [ -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (ensA) [ -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (a) [ -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION_VAR_DECL [ -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (ensB) [ -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (a) [ -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (buildEns) [ -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (1) [ -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (ens) [ -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (a) [ -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (x) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_READ [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (x) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_WHILE [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_NOT [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_EQ [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (x) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_ADD_ISET [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (x) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (ens) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_READ [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (x) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (equals) [ -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (b) [ -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (a) [ -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (b) [ -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (equal) [ -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (b) [ -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (equalsi) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_PARAMS [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_TYPE (b) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_DECLBLOCK [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_BODY [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_ASSIGN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (equal) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_AND [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_EQ [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_SIZE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_SIZE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensB) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_OR [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_EQ [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  |  OP_SIZE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_EQ [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensB) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_IF [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_AND [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (equal) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_LT [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_SIZE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_ASSIGN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_ASSIGN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensB) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_REMOVE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_REMOVE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensB) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_ASSIGN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (equal) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_FUNCTION_CALL [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  OP_ID (equals) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_ADD_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (a) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  OP_ADD_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  |  |  OP_LEXPR (ensB) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_RETURN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (equal) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_RETURN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_FUNCTION_CALL [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_ID (equalsi) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (print) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (1) [ -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (ens) [ -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (a) [ -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (a) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_WHILE [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LT [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_SIZE_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_WRITE [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_ADD_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_REMOVE_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_WHILE [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LT [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_SIZE_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_LEXPR (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_ADD_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_REMOVE_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  |  OP_LEXPR (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  |  OP_LEXPR (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_BODY [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  OP_INSTRUCTION_LIST [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_REMOVE_ISET [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_CONSTANT_INT (1) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_LEXPR (ensA) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_REMOVE_ISET [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_CONSTANT_INT (2) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_LEXPR (ensB) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_ID (buildEns) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_LEXPR (ensA) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_ID (buildEns) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_LEXPR (ensB) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_IF_ELSE [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (equals) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_WRITE [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_CONSTANT_INT (1) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_WRITE [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_CONSTANT_INT (0) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_ID (print) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_LEXPR (ensA) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_ID (print) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_LEXPR (ensB) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;84: OP_PROGRAM []
ssp 11
lda i 0 8
ldc i 0
sto i
lda a 0 7
ldc i 1
new
lda a 0 7
ind a
ldc a 0
sto a
lda i 0 10
ldc i 0
sto i
lda a 0 9
ldc i 1
new
lda a 0 9
ind a
ldc a 0
sto a
ujp @begin
define @iset_contains
ssp 5
ldc a 3
ldc b 0
sto b
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @containsWhile
ldc a 3
ind b
not b
fjp @containsEndWhile
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @containsEndWhile
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 3
ldc a 2
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
equ i
sto b
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @containsWhile
define @containsEndWhile
lda b 0 0
ldc a 3
ind b
sto b
retf
define @iset_add
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @addToSetElseSizeDiffZero
ldc a 0
ind a
ldc i 2
new
ldc a 0
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 0
ind a
ind a
ldc a 0
sto a
ldc a 0
ind a
ldc a 1
add a
ldc i 1
sto i
ujp @addToSetEndIfSizeZero
define @addToSetElseSizeDiffZero
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @addToSetWhileFindWhereToInsert
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 3
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
les i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @addToSetWhileFindWhereToInsert
define @addToSetEndWhileFindWhereToInsert
ldc a 2
ind a
ldc i 2
new
ldc a 2
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 2
ind a
ind a
ldc a 3
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
add i
sto i
define @addToSetEndIfSizeZero
define @addToSetEndAddToSet
retp
define @iset_remove
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @removeFromSetElseNonEmptySet
ujp @removeFromSetEndRemove
define @removeFromSetElseNonEmptySet
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @removeFromSetWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndWhileNotVal
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
neq i
fjp @removeFromSetEndWhileNotVal
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @removeFromSetWhileNotVal
define @removeFromSetEndWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndIfValEqu
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
equ i
fjp @removeFromSetEndIfValEqu
ldc a 2
ind a
ldc a 3
ind a
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
sub i
sto i
define @removeFromSetEndIfValEqu
define @removeFromSetEndRemove
retp
define @iset_max
ssp 5
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @maxInSetWhileNotEnd
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @maxInSetEndWhileNotEnd
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @maxInSetWhileNotEnd
define @maxInSetEndWhileNotEnd
lda i 0 0
ldc a 2
ind a
ldc a 1
add a
ind i
sto i
retf
define @iset_min
ssp 5
lda i 0 0
ldc a 0
ind a
ldc a 1
add a
ind i
sto i
retf
;71: OP_FUNCTION_DECLBLOCK [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;33: OP_FUNCTION [ -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @buildEns_1
ssp 7
ujp @buildEns_1Body
;27: OP_FUNCTION_DECLBLOCK [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @buildEns_1Body
;33: OP_INSTRUCTION_LIST [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;28: OP_READ [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 0 6
read
sto i
;32: OP_WHILE [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @while_2
;29: OP_NOT [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;29: OP_EQ [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;29: OP_LEXPR (x) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 0 6
ind i
;29: OP_CONSTANT_INT (0) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 0
equ i
not b
fjp @od_2
;32: OP_INSTRUCTION_LIST [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;30: OP_ADD_ISET [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;30: OP_LEXPR (x) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 0 6
ind i
sto i
ldc a 0
lod a 0 5
sto a
mst 0
cup 0 @iset_contains
not b
fjp @skip_insert_3
ldc a 1
;30: OP_LEXPR (x) [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 0 6
ind i
sto i
ldc a 0
lod a 0 5
sto a
mst 0
cup 0 @iset_add
define @skip_insert_3
;31: OP_READ [ -> x:i(1,6) -> +ens:a(1,5) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 0 6
read
sto i
ujp @while_2
define @od_2
retp
;56: OP_FUNCTION [ -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @equals_4
ssp 8
ujp @equals_4Body
;54: OP_FUNCTION_DECLBLOCK [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;53: OP_FUNCTION [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @equalsi_5
ssp 5
ujp @equalsi_5Body
;41: OP_FUNCTION_DECLBLOCK [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @equalsi_5Body
;53: OP_INSTRUCTION_LIST [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;42: OP_ASSIGN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda b 1 7
;42: OP_AND [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;42: OP_EQ [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;42: OP_SIZE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 2 7
ldc a 1
add a
ind i
;42: OP_SIZE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 2 9
ldc a 1
add a
ind i
equ i
not b
fjp @true_6
ujp @false_6
define @true_6
;42: OP_OR [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;42: OP_EQ [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;42: OP_CONSTANT_INT (0) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 0
;42: OP_SIZE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 2 7
ldc a 1
add a
ind i
equ i
not b
fjp @true_7
;42: OP_EQ [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;42: OP_MIN_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;42: OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 2 7
ind a
sto a
mst 0
cup 0 @iset_min
;42: OP_MIN_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;42: OP_LEXPR (ensB) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 2 9
ind a
sto a
mst 0
cup 0 @iset_min
equ i
ujp @end_7
define @true_7
ldc b 1
define @end_7
ujp @end_6
define @false_6
ldc b 0
define @end_6
sto b
;51: OP_IF [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;43: OP_AND [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;43: OP_LEXPR (equal) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda b 1 7
ind b
not b
fjp @true_9
ujp @false_9
define @true_9
;43: OP_LT [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;43: OP_CONSTANT_INT (0) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 0
;43: OP_SIZE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 2 7
ldc a 1
add a
ind i
les i
ujp @end_9
define @false_9
ldc b 0
define @end_9
fjp @fi_8
;51: OP_INSTRUCTION_LIST [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;44: OP_ASSIGN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 1 5
;44: OP_MIN_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;44: OP_LEXPR (ensA) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 2 7
ind a
sto a
mst 0
cup 0 @iset_min
sto i
;45: OP_ASSIGN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 1 6
;45: OP_MIN_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;45: OP_LEXPR (ensB) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 2 9
ind a
sto a
mst 0
cup 0 @iset_min
sto i
;46: OP_REMOVE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;46: OP_LEXPR (a) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 1 5
ind i
sto i
ldc a 0
lda a 2 7
sto a
mst 0
cup 0 @iset_remove
;47: OP_REMOVE_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;47: OP_LEXPR (b) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 1 6
ind i
sto i
ldc a 0
lda a 2 9
sto a
mst 0
cup 0 @iset_remove
;48: OP_ASSIGN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda b 1 7
;48: OP_FUNCTION_CALL [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
mst 2
cup 0 @equals_4
sto b
;49: OP_ADD_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;49: OP_LEXPR (a) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 1 5
ind i
sto i
ldc a 0
lda a 2 7
sto a
mst 0
cup 0 @iset_contains
not b
fjp @skip_insert_10
ldc a 1
;49: OP_LEXPR (a) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 1 5
ind i
sto i
ldc a 0
lda a 2 7
sto a
mst 0
cup 0 @iset_add
define @skip_insert_10
;50: OP_ADD_ISET [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;50: OP_LEXPR (b) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 1 6
ind i
sto i
ldc a 0
lda a 2 9
sto a
mst 0
cup 0 @iset_contains
not b
fjp @skip_insert_11
ldc a 1
;50: OP_LEXPR (b) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda i 1 6
ind i
sto i
ldc a 0
lda a 2 9
sto a
mst 0
cup 0 @iset_add
define @skip_insert_11
define @fi_8
;52: OP_RETURN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda b 0 0
;52: OP_LEXPR (equal) [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda b 1 7
ind b
sto b
retf
retf
define @equals_4Body
;56: OP_INSTRUCTION_LIST [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;55: OP_RETURN [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda b 0 0
;55: OP_FUNCTION_CALL [ -> equalsi():b(1,4) -> equal:b(1,7) -> b:i(1,6) -> a:i(1,5) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
mst 0
cup 0 @equalsi_5
sto b
retf
retf
;70: OP_FUNCTION [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @print_12
ssp 8
lda i 0 7
ldc i 0
sto i
lda a 0 6
ldc i 1
new
lda a 0 6
ind a
ldc a 0
sto a
ujp @print_12Body
;60: OP_FUNCTION_DECLBLOCK [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @print_12Body
;70: OP_INSTRUCTION_LIST [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;65: OP_WHILE [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @while_13
;61: OP_LT [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;61: OP_CONSTANT_INT (0) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 0
;61: OP_SIZE_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lod a 0 5
ldc a 1
add a
ind i
les i
fjp @od_13
;65: OP_INSTRUCTION_LIST [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;62: OP_WRITE [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;62: OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;62: OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lod a 0 5
ind a
sto a
mst 0
cup 0 @iset_min
prin
;63: OP_ADD_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;63: OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;63: OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lod a 0 5
ind a
sto a
mst 0
cup 0 @iset_min
sto i
ldc a 0
lda a 0 6
sto a
mst 0
cup 0 @iset_contains
not b
fjp @skip_insert_14
ldc a 1
;63: OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;63: OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lod a 0 5
ind a
sto a
mst 0
cup 0 @iset_min
sto i
ldc a 0
lda a 0 6
sto a
mst 0
cup 0 @iset_add
define @skip_insert_14
;64: OP_REMOVE_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;64: OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;64: OP_LEXPR (ens) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lod a 0 5
ind a
sto a
mst 0
cup 0 @iset_min
sto i
ldc a 0
lod a 0 5
sto a
mst 0
cup 0 @iset_remove
ujp @while_13
define @od_13
;69: OP_WHILE [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
define @while_15
;66: OP_LT [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;66: OP_CONSTANT_INT (0) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 0
;66: OP_SIZE_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 0 6
ldc a 1
add a
ind i
les i
fjp @od_15
;69: OP_INSTRUCTION_LIST [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;67: OP_ADD_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;67: OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;67: OP_LEXPR (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 0 6
ind a
sto a
mst 0
cup 0 @iset_min
sto i
ldc a 0
lod a 0 5
sto a
mst 0
cup 0 @iset_contains
not b
fjp @skip_insert_16
ldc a 1
;67: OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;67: OP_LEXPR (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 0 6
ind a
sto a
mst 0
cup 0 @iset_min
sto i
ldc a 0
lod a 0 5
sto a
mst 0
cup 0 @iset_add
define @skip_insert_16
;68: OP_REMOVE_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;68: OP_MIN_ISET [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 0
;68: OP_LEXPR (tmp) [ -> tmp:a(1,6) -> +ens:a(1,5) -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
lda a 0 6
ind a
sto a
mst 0
cup 0 @iset_min
sto i
ldc a 0
lda a 0 6
sto a
mst 0
cup 0 @iset_remove
ujp @while_15
define @od_15
retp
define @begin
;83: OP_INSTRUCTION_LIST [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;72: OP_REMOVE_ISET [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;72: OP_CONSTANT_INT (1) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 1
sto i
ldc a 0
lda a 0 7
sto a
mst 0
cup 0 @iset_remove
;73: OP_REMOVE_ISET [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc a 1
;73: OP_CONSTANT_INT (2) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 2
sto i
ldc a 0
lda a 0 9
sto a
mst 0
cup 0 @iset_remove
;74: OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
mst 0
lda a 0 7
cup 1 @buildEns_1
;75: OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
mst 0
lda a 0 9
cup 1 @buildEns_1
;80: OP_IF_ELSE [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;76: OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
mst 0
cup 0 @equals_4
fjp @else_17
;78: OP_INSTRUCTION_LIST [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;77: OP_WRITE [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;77: OP_CONSTANT_INT (1) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 1
prin
ujp @fi_17
define @else_17
;80: OP_INSTRUCTION_LIST [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;79: OP_WRITE [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
;79: OP_CONSTANT_INT (0) [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
ldc i 0
prin
define @fi_17
;81: OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
mst 0
lda a 0 7
cup 1 @print_12
;82: OP_FUNCTION_CALL [ -> print(&a):v(0,4) -> equals():b(0,4) -> buildEns(&a):v(0,4) -> ensB:a(0,9) -> ensA:a(0,7) -> b:i(0,6) -> a:b(0,5) -> main():v(-1,4)]
mst 0
lda a 0 9
cup 1 @print_12
stp
