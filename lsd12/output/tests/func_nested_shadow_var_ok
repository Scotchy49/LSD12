;OP_PROGRAM []
;|  OP_ID (x) []
;|  next
;|  OP_FUNCTION [ -> main():v(-1,4)]
;|  |  OP_ID (main) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_PARAMS [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_TYPE (v) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_DECLBLOCK [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  OP_FUNCTION_VAR_DECL [ -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (a) [ -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (i) [ -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (a) [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (1) [ -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (a) [ -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (i) [ -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (b) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ASSIGN [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ASSIGN [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_CONSTANT_INT (3) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ASSIGN [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (a) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_CONSTANT_INT (2) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_RETURN [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (b) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_BODY [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  OP_INSTRUCTION_LIST [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ASSIGN [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_LEXPR (a) [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_CONSTANT_INT (1) [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_WRITE [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_CALL [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (a) [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_LEXPR (a) [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_WRITE [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_LEXPR (a) [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;19: OP_PROGRAM []
ssp 6
ujp @begin
define @iset_contains
ssp 5
ldc a 3
ldc b 0
sto b
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @containsWhile
ldc a 3
ind b
not b
fjp @containsEndWhile
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @containsEndWhile
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 3
ldc a 2
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
equ i
sto b
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @containsWhile
define @containsEndWhile
lda b 0 0
ldc a 3
ind b
sto b
retf
define @iset_add
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @addToSetElseSizeDiffZero
ldc a 0
ind a
ldc i 2
new
ldc a 0
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 0
ind a
ind a
ldc a 0
sto a
ldc a 0
ind a
ldc a 1
add a
ldc i 1
sto i
ujp @addToSetEndIfSizeZero
define @addToSetElseSizeDiffZero
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @addToSetWhileFindWhereToInsert
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 3
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
les i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @addToSetWhileFindWhereToInsert
define @addToSetEndWhileFindWhereToInsert
ldc a 2
ind a
ldc i 2
new
ldc a 2
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 2
ind a
ind a
ldc a 3
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
add i
sto i
define @addToSetEndIfSizeZero
define @addToSetEndAddToSet
retp
define @iset_remove
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @removeFromSetElseNonEmptySet
ujp @removeFromSetEndRemove
define @removeFromSetElseNonEmptySet
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @removeFromSetWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndWhileNotVal
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
neq i
fjp @removeFromSetEndWhileNotVal
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @removeFromSetWhileNotVal
define @removeFromSetEndWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndIfValEqu
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
equ i
fjp @removeFromSetEndIfValEqu
ldc a 2
ind a
ldc a 3
ind a
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
sub i
sto i
define @removeFromSetEndIfValEqu
define @removeFromSetEndRemove
retp
define @iset_max
ssp 5
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @maxInSetWhileNotEnd
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @maxInSetEndWhileNotEnd
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @maxInSetWhileNotEnd
define @maxInSetEndWhileNotEnd
lda i 0 0
ldc a 2
ind a
ldc a 1
add a
ind i
sto i
retf
define @iset_min
ssp 5
lda i 0 0
ldc a 0
ind a
ldc a 1
add a
ind i
sto i
retf
;14: OP_FUNCTION_DECLBLOCK [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;13: OP_FUNCTION [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
define @a_1
ssp 7
ujp @a_1Body
;8: OP_FUNCTION_DECLBLOCK [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
define @a_1Body
;13: OP_INSTRUCTION_LIST [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;9: OP_ASSIGN [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 6
;9: OP_LEXPR (a) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lod a 0 5
ind i
sto i
;10: OP_ASSIGN [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 6
;10: OP_CONSTANT_INT (3) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 3
sto i
;11: OP_ASSIGN [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lod a 0 5
;11: OP_CONSTANT_INT (2) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 2
sto i
;12: OP_RETURN [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 0
;12: OP_LEXPR (b) [ -> b:i(1,6) -> +a:i(1,5) -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 6
ind i
sto i
retf
retf
define @begin
;18: OP_INSTRUCTION_LIST [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;15: OP_ASSIGN [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
;15: OP_CONSTANT_INT (1) [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
ldc i 1
sto i
;16: OP_WRITE [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;16: OP_FUNCTION_CALL [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
mst 0
lda i 0 5
cup 1 @a_1
prin
;17: OP_WRITE [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
;17: OP_LEXPR (a) [ -> a(&i):i(0,4) -> a:i(0,5) -> main():v(-1,4)]
lda i 0 5
ind i
prin
stp
