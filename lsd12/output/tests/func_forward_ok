;OP_PROGRAM []
;|  OP_ID (x) []
;|  next
;|  OP_FUNCTION [ -> main():v(-1,0)]
;|  |  OP_ID (main) [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_PARAMS [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_TYPE (v) [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_DECLBLOCK [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  OP_FUNCTION_FORWARD [ -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ID (a) [ -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +x:i(1,0) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +x:i(1,0) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (0) [ -> +x:i(1,0) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (x) [ -> +x:i(1,0) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> +x:i(1,0) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +x:i(1,0) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ID (a) [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  OP_FUNCTION_CALL [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  |  OP_ID (a) [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  |  |  OP_CONSTANT_INT (2) [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ID (a) [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (1) [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (x) [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  OP_WRITE [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  |  OP_LEXPR (x) [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_BODY [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  OP_INSTRUCTION_LIST [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_FUNCTION_CALL [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_ID (a) [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_PROGRAM []
ssp 0
ujp @begin
;Generating pcode for node OP_FUNCTION_DECLBLOCK [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_FUNCTION_FORWARD [ -> -a(i):v(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_FUNCTION [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
define @a_2
ssp 5
ujp @a_2Body
;Generating pcode for node OP_FUNCTION_DECLBLOCK [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
define @a_2Body
;Generating pcode for node OP_INSTRUCTION_LIST [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_FUNCTION_CALL [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
mst 0
;Generating pcode for node OP_CONSTANT_INT (2) [ -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
ldc i 2
cup 1 @a_1
retp
;Generating pcode for node OP_FUNCTION [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
define @a_1
ssp 6
ujp @a_1Body
;Generating pcode for node OP_FUNCTION_DECLBLOCK [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
define @a_1Body
;Generating pcode for node OP_INSTRUCTION_LIST [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_WRITE [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_LEXPR (x) [ -> +x:i(1,0) -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
lod a 0 5
ind i
prin
retp
define @begin
;Generating pcode for node OP_INSTRUCTION_LIST [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_FUNCTION_CALL [ -> a(&i):v(0,2) -> a():v(0,1) -> -a(i):v(0,0) -> main():v(-1,0)]
mst 0
cup 0 @a_2
stp
