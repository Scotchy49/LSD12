;OP_PROGRAM []
;|  OP_ID (rexpr) []
;|  next
;|  OP_FUNCTION [ -> main():v(-1,0)]
;|  |  OP_ID (main) [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_PARAMS [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_TYPE (v) [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_DECLBLOCK [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  OP_FUNCTION_VAR_DECL [ -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ID (a) [ -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (i) [ -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ID (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  OP_WRITE [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_BODY [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  OP_INSTRUCTION_LIST [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ASSIGN [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_CONSTANT_INT (1) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_CALL [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_ID (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_PROGRAM []
ssp 1
ujp @begin
;Generating pcode for node OP_FUNCTION_DECLBLOCK [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_FUNCTION [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
define @a_1
ssp 5
ujp @a_1Body
;Generating pcode for node OP_FUNCTION_DECLBLOCK [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
define @a_1Body
;Generating pcode for node OP_INSTRUCTION_LIST [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_WRITE [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 1 0
ind i
prin
retp
define @begin
;Generating pcode for node OP_INSTRUCTION_LIST [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_ASSIGN [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
;Generating pcode for node OP_CONSTANT_INT (1) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
ldc i 1
sto i
;Generating pcode for node OP_FUNCTION_CALL [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
mst 0
cup 0 @a_1
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
;Generating pcode for node OP_LEXPR (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
stp
