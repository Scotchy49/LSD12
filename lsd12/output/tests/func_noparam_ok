;OP_PROGRAM []
;|  OP_ID (x) []
;|  next
;|  OP_FUNCTION [ -> main():v(-1,0)]
;|  |  OP_ID (main) [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_PARAMS [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_TYPE (v) [ -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_DECLBLOCK [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  OP_FUNCTION_VAR_DECL [ -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ID (a) [ -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (i) [ -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ID (a) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_ID (b) [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (i) [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_FUNCTION_VAR_DECL [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  OP_ID (a) [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  OP_ASSIGN [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  |  OP_LEXPR (a) [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_CONSTANT_INT (2) [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_RETURN [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  |  OP_LEXPR (a) [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  next
;|  |  OP_FUNCTION_BODY [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  OP_INSTRUCTION_LIST [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  OP_FUNCTION_CALL [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_ID (a) [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_ASSIGN [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_LEXPR (a) [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  OP_ID (b) [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  next
;|  |  |  |  OP_WRITE [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;|  |  |  |  |  OP_LEXPR (a) [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_PROGRAM []
ssp 1
ujp @begin
;Generating pcode for node OP_FUNCTION_DECLBLOCK [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_FUNCTION [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
define @a
ssp 5
ujp @aBody
;Generating pcode for node OP_FUNCTION_DECLBLOCK [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
define @aBody
;Generating pcode for node OP_INSTRUCTION_LIST [ -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
retp
;Generating pcode for node OP_FUNCTION [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
define @b
ssp 6
ujp @bBody
;Generating pcode for node OP_FUNCTION_DECLBLOCK [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
define @bBody
;Generating pcode for node OP_INSTRUCTION_LIST [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_ASSIGN [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
;Generating pcode for node OP_CONSTANT_INT (2) [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
ldc i 2
sto i
;Generating pcode for node OP_RETURN [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
;Generating pcode for node OP_LEXPR (a) [ -> a:i(1,0) -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 1 0
ind i
sto i
retf
retf
define @begin
;Generating pcode for node OP_INSTRUCTION_LIST [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_FUNCTION_CALL [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
mst 0
cup 0 @a
;Generating pcode for node OP_ASSIGN [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
;Generating pcode for node OP_FUNCTION_CALL [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
mst 0
cup 0 @b
sto i
;Generating pcode for node OP_WRITE [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
;Generating pcode for node OP_LEXPR (a) [ -> b():i(0,2) -> a():v(0,1) -> a:i(0,0) -> main():v(-1,0)]
lda i 0 0
ind i
prin
stp
