;OP_PROGRAM []
;|  OP_ID (x) []
;|  next
;|  OP_FUNCTION [ -> main():v(-1,4)]
;|  |  OP_ID (main) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_PARAMS [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_TYPE (v) [ -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_DECLBLOCK [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  OP_FUNCTION_VAR_DECL [ -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (b) [ -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_VAR_TYPE (b) [ -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (a) [ -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (0) [ -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (a) [ -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (1) [ -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (b) [ -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (b) [ -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_ID (c) [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_PARAMS [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_TYPE (v) [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_DECLBLOCK [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_FUNCTION_BODY [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_INSTRUCTION_LIST [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_WRITE [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  |  OP_CONSTANT_INT (1) [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_CALL [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_ID (c) [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  next
;|  |  |  OP_FUNCTION [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_ID (b) [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_PARAMS [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_FUNCTION_PARAM [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_PARAM_VAR (0) [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_ID (a) [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_VAR_TYPE (i) [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_TYPE (v) [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_DECLBLOCK [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  next
;|  |  |  |  OP_FUNCTION_BODY [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_INSTRUCTION_LIST [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_FUNCTION_CALL [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  OP_ID (a) [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  OP_CONSTANT_INT (1) [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  |  |  next
;|  |  |  |  |  |  |  |  OP_LEXPR (b) [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  next
;|  |  OP_FUNCTION_BODY [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  OP_INSTRUCTION_LIST [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  OP_FUNCTION_CALL [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  OP_ID (a) [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  next
;|  |  |  |  |  OP_FUNCTION_CALL_PARAMS [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  OP_CONSTANT_INT (1) [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;|  |  |  |  |  |  next
;|  |  |  |  |  |  OP_LEXPR (b) [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;24: OP_PROGRAM []
ssp 6
ujp @begin
define @iset_contains
ssp 5
ldc a 3
ldc b 0
sto b
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @containsWhile
ldc a 3
ind b
not b
fjp @containsEndWhile
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @containsEndWhile
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 3
ldc a 2
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
equ i
sto b
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @containsWhile
define @containsEndWhile
lda b 0 0
ldc a 3
ind b
sto b
retf
define @iset_add
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @addToSetElseSizeDiffZero
ldc a 0
ind a
ldc i 2
new
ldc a 0
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 0
ind a
ind a
ldc a 0
sto a
ldc a 0
ind a
ldc a 1
add a
ldc i 1
sto i
ujp @addToSetEndIfSizeZero
define @addToSetElseSizeDiffZero
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 0
sto i
define @addToSetWhileFindWhereToInsert
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 3
ind a
ldc a 1
add a
ind i
ldc a 1
ind i
les i
fjp @addToSetEndWhileFindWhereToInsert
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @addToSetWhileFindWhereToInsert
define @addToSetEndWhileFindWhereToInsert
ldc a 2
ind a
ldc i 2
new
ldc a 2
ind a
ind a
ldc a 1
add a
ldc a 1
ind i
sto i
ldc a 2
ind a
ind a
ldc a 3
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
add i
sto i
define @addToSetEndIfSizeZero
define @addToSetEndAddToSet
retp
define @iset_remove
ssp 5
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 0
equ i
fjp @removeFromSetElseNonEmptySet
ujp @removeFromSetEndRemove
define @removeFromSetElseNonEmptySet
ldc a 2
ldc a 0
ind a
sto a
ldc a 3
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @removeFromSetWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndWhileNotVal
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
neq i
fjp @removeFromSetEndWhileNotVal
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 3
ind a
sto a
ldc a 3
ldc a 3
ind a
ind a
sto a
ujp @removeFromSetWhileNotVal
define @removeFromSetEndWhileNotVal
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
leq i
fjp @removeFromSetEndIfValEqu
ldc a 1
ind i
ldc a 3
ind a
ldc a 1
add a
ind i
equ i
fjp @removeFromSetEndIfValEqu
ldc a 2
ind a
ldc a 3
ind a
ind a
sto a
ldc a 0
ind a
ldc a 1
add a
ldc a 0
ind a
ldc a 1
add a
ind i
ldc i 1
sub i
sto i
define @removeFromSetEndIfValEqu
define @removeFromSetEndRemove
retp
define @iset_max
ssp 5
ldc a 2
ldc a 0
ind a
ind a
sto a
ldc a 4
ldc i 1
sto i
define @maxInSetWhileNotEnd
ldc a 4
ind i
ldc a 0
ind a
ldc a 1
add a
ind i
les i
fjp @maxInSetEndWhileNotEnd
ldc a 4
ldc a 4
ind i
ldc i 1
add i
sto i
ldc a 2
ldc a 2
ind a
ind a
sto a
ujp @maxInSetWhileNotEnd
define @maxInSetEndWhileNotEnd
lda i 0 0
ldc a 2
ind a
ldc a 1
add a
ind i
sto i
retf
define @iset_min
ssp 5
lda i 0 0
ldc a 0
ind a
ldc a 1
add a
ind i
sto i
retf
;21: OP_FUNCTION_DECLBLOCK [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;15: OP_FUNCTION [ -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
define @a_1
ssp 7
ujp @a_1Body
;13: OP_FUNCTION_DECLBLOCK [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;12: OP_FUNCTION [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
define @c_2
ssp 5
ujp @c_2Body
;10: OP_FUNCTION_DECLBLOCK [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
define @c_2Body
;12: OP_INSTRUCTION_LIST [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;11: OP_WRITE [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;11: OP_CONSTANT_INT (1) [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
ldc i 1
prin
retp
define @a_1Body
;15: OP_INSTRUCTION_LIST [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;14: OP_FUNCTION_CALL [ -> c():v(1,4) -> +b:b(1,6) -> +a:i(1,5) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
mst 0
cup 0 @c_2
retp
;20: OP_FUNCTION [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
define @b_3
ssp 6
ujp @b_3Body
;18: OP_FUNCTION_DECLBLOCK [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
define @b_3Body
;20: OP_INSTRUCTION_LIST [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;19: OP_FUNCTION_CALL [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
mst 1
;19: OP_CONSTANT_INT (1) [ -> +a:i(1,5) -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
ldc i 1
lda b 1 5
cup 2 @a_1
retp
define @begin
;23: OP_INSTRUCTION_LIST [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
;22: OP_FUNCTION_CALL [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
mst 0
;22: OP_CONSTANT_INT (1) [ -> b(i):v(0,4) -> a(i,&b):v(0,4) -> b:b(0,5) -> main():v(-1,4)]
ldc i 1
lda b 0 5
cup 2 @a_1
stp
